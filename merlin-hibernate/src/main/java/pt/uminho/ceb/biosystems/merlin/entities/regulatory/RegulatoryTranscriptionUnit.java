package pt.uminho.ceb.biosystems.merlin.entities.regulatory;
// Generated Jul 16, 2019 10:41:08 AM by Hibernate Tools 5.2.12.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

/**
 * RegulatoryTranscriptionUnit generated by hbm2java
 */
@Entity
@Table(name = "regulatory_transcription_unit")
public class RegulatoryTranscriptionUnit implements java.io.Serializable {

	private int idtranscriptionUnit;
	private String name;
	private String booleanRule;
	private Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters = new HashSet<RegulatoryTranscriptionUnitPromoter>(
			0);
	private Set<RegulatoryTranscriptionUnitGene> regulatoryTranscriptionUnitGenes = new HashSet<RegulatoryTranscriptionUnitGene>(
			0);

	public RegulatoryTranscriptionUnit() {
	}

	public RegulatoryTranscriptionUnit(int idtranscriptionUnit) {
		this.idtranscriptionUnit = idtranscriptionUnit;
	}

	public RegulatoryTranscriptionUnit(int idtranscriptionUnit, String name, String booleanRule,
			Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters,
			Set<RegulatoryTranscriptionUnitGene> regulatoryTranscriptionUnitGenes) {
		this.idtranscriptionUnit = idtranscriptionUnit;
		this.name = name;
		this.booleanRule = booleanRule;
		this.regulatoryTranscriptionUnitPromoters = regulatoryTranscriptionUnitPromoters;
		this.regulatoryTranscriptionUnitGenes = regulatoryTranscriptionUnitGenes;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY, generator="UseExistingIdOtherwiseGenerateUsingIdentity")
	@GenericGenerator(name = "UseExistingIdOtherwiseGenerateUsingIdentity", strategy = "pt.uminho.ceb.biosystems.merlin.auxiliary.UseExistingIdOtherwiseGenerateUsingIdentity")	
	@Column(name = "idtranscription_unit", unique = true, nullable = false)
	public int getIdtranscriptionUnit() {
		return this.idtranscriptionUnit;
	}

	public void setIdtranscriptionUnit(int idtranscriptionUnit) {
		this.idtranscriptionUnit = idtranscriptionUnit;
	}

	@Column(name = "name", length = 150)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	@Column(name = "boolean_rule", length = 400)
	public String getBooleanRule() {
		return this.booleanRule;
	}

	public void setBooleanRule(String booleanRule) {
		this.booleanRule = booleanRule;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "regulatoryTranscriptionUnit")
	@OnDelete(action = OnDeleteAction.CASCADE)
	public Set<RegulatoryTranscriptionUnitPromoter> getRegulatoryTranscriptionUnitPromoters() {
		return this.regulatoryTranscriptionUnitPromoters;
	}

	public void setRegulatoryTranscriptionUnitPromoters(
			Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters) {
		this.regulatoryTranscriptionUnitPromoters = regulatoryTranscriptionUnitPromoters;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "regulatoryTranscriptionUnit")
	@OnDelete(action = OnDeleteAction.CASCADE)
	public Set<RegulatoryTranscriptionUnitGene> getRegulatoryTranscriptionUnitGenes() {
		return this.regulatoryTranscriptionUnitGenes;
	}

	public void setRegulatoryTranscriptionUnitGenes(
			Set<RegulatoryTranscriptionUnitGene> regulatoryTranscriptionUnitGenes) {
		this.regulatoryTranscriptionUnitGenes = regulatoryTranscriptionUnitGenes;
	}

}
