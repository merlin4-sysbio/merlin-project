package pt.uminho.ceb.biosystems.merlin.entities.regulatory;
// Generated Jul 16, 2019 10:41:08 AM by Hibernate Tools 5.2.12.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

/**
 * RegulatoryPromoter generated by hbm2java
 */
@Entity
@Table(name = "regulatory_promoter")
public class RegulatoryPromoter implements java.io.Serializable {

	private int idpromoter;
	private String name;
	private Double absolutePosition;
	private Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters = new HashSet<RegulatoryTranscriptionUnitPromoter>(
			0);
	private Set<RegulatoryEvent> regulatoryEvents = new HashSet<RegulatoryEvent>(0);
	private Set<RegulatorySigmaPromoter> regulatorySigmaPromoters = new HashSet<RegulatorySigmaPromoter>(0);

	public RegulatoryPromoter() {
	}

	public RegulatoryPromoter(int idpromoter) {
		this.idpromoter = idpromoter;
	}

	public RegulatoryPromoter(int idpromoter, String name, Double absolutePosition,
			Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters,
			Set<RegulatoryEvent> regulatoryEvents, Set<RegulatorySigmaPromoter> regulatorySigmaPromoters) {
		this.idpromoter = idpromoter;
		this.name = name;
		this.absolutePosition = absolutePosition;
		this.regulatoryTranscriptionUnitPromoters = regulatoryTranscriptionUnitPromoters;
		this.regulatoryEvents = regulatoryEvents;
		this.regulatorySigmaPromoters = regulatorySigmaPromoters;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY, generator="UseExistingIdOtherwiseGenerateUsingIdentity")
	@GenericGenerator(name = "UseExistingIdOtherwiseGenerateUsingIdentity", strategy = "pt.uminho.ceb.biosystems.merlin.auxiliary.UseExistingIdOtherwiseGenerateUsingIdentity")	
	@Column(name = "idpromoter", unique = true, nullable = false)
	public int getIdpromoter() {
		return this.idpromoter;
	}

	public void setIdpromoter(int idpromoter) {
		this.idpromoter = idpromoter;
	}

	@Column(name = "name", length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "absolute_position", precision = 22, scale = 0)
	public Double getAbsolutePosition() {
		return this.absolutePosition;
	}

	public void setAbsolutePosition(Double absolutePosition) {
		this.absolutePosition = absolutePosition;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "regulatoryPromoter")
	@OnDelete(action = OnDeleteAction.CASCADE)
	public Set<RegulatoryTranscriptionUnitPromoter> getRegulatoryTranscriptionUnitPromoters() {
		return this.regulatoryTranscriptionUnitPromoters;
	}

	public void setRegulatoryTranscriptionUnitPromoters(
			Set<RegulatoryTranscriptionUnitPromoter> regulatoryTranscriptionUnitPromoters) {
		this.regulatoryTranscriptionUnitPromoters = regulatoryTranscriptionUnitPromoters;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "regulatoryPromoter")
	@OnDelete(action = OnDeleteAction.CASCADE)
	public Set<RegulatoryEvent> getRegulatoryEvents() {
		return this.regulatoryEvents;
	}

	public void setRegulatoryEvents(Set<RegulatoryEvent> regulatoryEvents) {
		this.regulatoryEvents = regulatoryEvents;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "regulatoryPromoter")
	@OnDelete(action = OnDeleteAction.CASCADE)
	public Set<RegulatorySigmaPromoter> getRegulatorySigmaPromoters() {
		return this.regulatorySigmaPromoters;
	}

	public void setRegulatorySigmaPromoters(Set<RegulatorySigmaPromoter> regulatorySigmaPromoters) {
		this.regulatorySigmaPromoters = regulatorySigmaPromoters;
	}

}
